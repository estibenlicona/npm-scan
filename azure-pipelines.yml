parameters:
  - name: forceRefresh
    displayName: Force cache refresh
    type: boolean
    default: false

trigger: none
pr: none

variables:
  PYTHON_VERSION: '3.11'
  PIP_CACHE_DIR: '$(Pipeline.Workspace)/.pip'

stages:
  - stage: Scan
    displayName: npm scan pipeline
    jobs:
      - job: runSteps
        displayName: Run scan steps (manual run)
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - checkout: self
            clean: true

          - task: UsePythonVersion@0
            inputs:
              versionSpec: '$(PYTHON_VERSION)'
              addToPath: true

          - task: Cache@2
            displayName: Restore pip cache
            inputs:
              key: 'pip | "$(Agent.OS)" | requirements.txt'
              restoreKeys: |
                pip | "$(Agent.OS)"
              path: '$(PIP_CACHE_DIR)'

          - script: |
              python -m pip install --upgrade pip
              python -m pip install --cache-dir $(PIP_CACHE_DIR) -r requirements.txt
            displayName: Install dependencies

          - task: Cache@2
            displayName: Restore npm scan cache
            inputs:
              key: 'npm-scan | "$(Agent.OS)" | "$(Build.SourceBranch)"'
              restoreKeys: |
                npm-scan | "$(Agent.OS)"
              path: $(Build.SourcesDirectory)/.npm_scan_cache

          - script: |
              python -m unittest
            displayName: Run unit tests
            env:
              NPM_SCAN_CACHE_ROOT: $(Build.SourcesDirectory)/.npm_scan_cache

          # Step 01
          - ${{ if eq(parameters.forceRefresh, true) }}:
            - script: python -m src.steps.step_01_get_repositories --force
              displayName: Step 01 - Get repositories (force)
              env:
                AZURE_PAT: $(AZURE_PAT)
                AZURE_ORG: $(AZURE_ORG)
                NPM_SCAN_CACHE_ROOT: $(Build.SourcesDirectory)/.npm_scan_cache
          - ${{ if ne(parameters.forceRefresh, true) }}:
            - script: python -m src.steps.step_01_get_repositories
              displayName: Step 01 - Get repositories
              env:
                AZURE_PAT: $(AZURE_PAT)
                AZURE_ORG: $(AZURE_ORG)
                NPM_SCAN_CACHE_ROOT: $(Build.SourcesDirectory)/.npm_scan_cache

          # Step 02
          - ${{ if eq(parameters.forceRefresh, true) }}:
            - script: python -m src.steps.step_02_get_packagesjson --force
              displayName: Step 02 - Cache package.json files (force)
              env:
                AZURE_PAT: $(AZURE_PAT)
                AZURE_ORG: $(AZURE_ORG)
                NPM_SCAN_CACHE_ROOT: $(Build.SourcesDirectory)/.npm_scan_cache
          - ${{ if ne(parameters.forceRefresh, true) }}:
            - script: python -m src.steps.step_02_get_packagesjson
              displayName: Step 02 - Cache package.json files
              env:
                AZURE_PAT: $(AZURE_PAT)
                AZURE_ORG: $(AZURE_ORG)
                NPM_SCAN_CACHE_ROOT: $(Build.SourcesDirectory)/.npm_scan_cache

          # Step 03
          - ${{ if eq(parameters.forceRefresh, true) }}:
            - script: python -m src.steps.step_03_get_package_lock --force
              displayName: Step 03 - Cache package-lock files (force)
              env:
                AZURE_PAT: $(AZURE_PAT)
                AZURE_ORG: $(AZURE_ORG)
                NPM_SCAN_CACHE_ROOT: $(Build.SourcesDirectory)/.npm_scan_cache
          - ${{ if ne(parameters.forceRefresh, true) }}:
            - script: python -m src.steps.step_03_get_package_lock
              displayName: Step 03 - Cache package-lock files
              env:
                AZURE_PAT: $(AZURE_PAT)
                AZURE_ORG: $(AZURE_ORG)
                NPM_SCAN_CACHE_ROOT: $(Build.SourcesDirectory)/.npm_scan_cache

          # Step 04
          - ${{ if eq(parameters.forceRefresh, true) }}:
            - script: python -m src.steps.step_04_audit_package_locks --force --packages-file packages.txt
              displayName: Step 04 - Audit package locks (force)
              env:
                AZURE_PAT: $(AZURE_PAT)
                AZURE_ORG: $(AZURE_ORG)
                NPM_SCAN_CACHE_ROOT: $(Build.SourcesDirectory)/.npm_scan_cache
          - ${{ if ne(parameters.forceRefresh, true) }}:
            - script: python -m src.steps.step_04_audit_package_locks --packages-file packages.txt
              displayName: Step 04 - Audit package locks
              env:
                AZURE_PAT: $(AZURE_PAT)
                AZURE_ORG: $(AZURE_ORG)
                NPM_SCAN_CACHE_ROOT: $(Build.SourcesDirectory)/.npm_scan_cache

          # Build HTML report from the CSV
          - script: python -m src.steps.step_05_publish_coverage
            displayName: Build HTML report
            env:
              NPM_SCAN_CACHE_ROOT: $(Build.SourcesDirectory)/.npm_scan_cache

          # (Coverage tab publishing removed as requested)

          - task: Cache@2
            displayName: Save npm scan cache
            inputs:
              key: 'npm-scan | "$(Agent.OS)" | "$(Build.SourceBranch)"'
              path: $(Build.SourcesDirectory)/.npm_scan_cache
              command: save

          - script: |
              if [ -d "$(Build.SourcesDirectory)/.npm_scan_cache" ]; then
                echo "##vso[task.setvariable variable=hasNpmScanCache]true"
              else
                echo "##vso[task.setvariable variable=hasNpmScanCache]false"
              fi
            displayName: Detect .npm_scan_cache presence
            condition: always()

          - task: PublishBuildArtifacts@1
            displayName: Publish npm scan cache
            condition: and(succeededOrFailed(), eq(variables['hasNpmScanCache'], 'true'))
            inputs:
              PathtoPublish: $(Build.SourcesDirectory)/.npm_scan_cache
              ArtifactName: npm_scan_cache
              publishLocation: Container

          - script: |
              if [ -f "$(Build.SourcesDirectory)/.npm_scan_cache/package_lock_audit.csv" ]; then
                echo "##vso[task.setvariable variable=hasAuditCsv]true"
              else
                echo "##vso[task.setvariable variable=hasAuditCsv]false"
              fi
            displayName: Detect audit CSV presence
            condition: always()

          - task: PublishBuildArtifacts@1
            displayName: Publish audit CSV
            condition: and(succeededOrFailed(), eq(variables['hasAuditCsv'], 'true'))
            inputs:
              PathtoPublish: $(Build.SourcesDirectory)/.npm_scan_cache/package_lock_audit.csv
              ArtifactName: audit_csv
              publishLocation: Container

          # (Publish coverage XML removed)

          # Detect HTML report dir
          - script: |
              if [ -d "$(Build.SourcesDirectory)/.npm_scan_cache/report-html" ]; then
                echo "##vso[task.setvariable variable=hasAuditHtml]true"
              else
                echo "##vso[task.setvariable variable=hasAuditHtml]false"
              fi
            displayName: Detect audit HTML dir
            condition: always()

          - task: PublishBuildArtifacts@1
            displayName: Publish audit HTML
            condition: and(succeededOrFailed(), eq(variables['hasAuditHtml'], 'true'))
            inputs:
              PathtoPublish: $(Build.SourcesDirectory)/.npm_scan_cache/report-html
              ArtifactName: audit_html
              publishLocation: Container
